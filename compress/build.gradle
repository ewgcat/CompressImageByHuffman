apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        externalNativeBuild {
            cmake {
//                cppFlags "-frtti -fexceptions"
//                arguments "-DANDROID_TOOLCHAIN=clang"
                abiFilters  "armeabi-v7a",'arm64-v8a'
            }
        }
        ndk {
            //打包进APK的ABI类型
            abiFilters 'armeabi-v7a','arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    sourceSets {
        main {
            java.srcDirs 'src/java'
            jniLibs.srcDirs  'libs'
//            jniLibs.srcDirs '../libjpeg/prebuilt', 'libs'

            // 这里没有添加libjpeg.so这个动态库，也是可以执行的。
            // 原因在于android本身使用了 libjpeg.so这个动态库，
            // 这个库存放在/system/lib下，如果我们没有加入
            // libjpeg.so的话，他会去/system/lib下加载这个动态库

            // 如果android手机上没有 libjpeg.so这个动态库的话，
            // 也可以使用: jniLibs.srcDirs '../libjpeg/prebuilt' 'lib'
            // 将libjpeg.so加入到apk中
        }
    }
    externalNativeBuild {

        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    api 'androidx.recyclerview:recyclerview:1.1.0'
    api 'androidx.annotation:annotation:1.1.0'
    api 'androidx.appcompat:appcompat:1.3.0-alpha02'
    api 'com.google.android.material:material:1.2.1'
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    api 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

}
//==============以下是要添加的内容======================
////task to delete the old jar 这个表示将会删除这个目录下的*.jar名称的旧版本
task deleteOldJar(type: Delete) {
    delete 'release/classes.jar'
    }

//task to export contents as jar 将from(*)该目录下的文件复制到release/下 并更改名称为Bsdiff.jar
task exportJar(type: Copy) {
from('build/intermediates/bundles/release/')
    into('release/')
   include('classes.jar')
   ///Rename the jar
   rename('classes.jar', 'compress.jar')
   }

exportJar.dependsOn(deleteOldJar, build)
repositories {
    mavenCentral()
}